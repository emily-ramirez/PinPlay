{"version":3,"sources":["components/ShowPlaylists.js","components/EndScreen.js","components/PlaylistForm.js","apis/django.js","history.js","components/Filters.js","actions/index.js","components/Header.js","components/App.js","reducers/authReducer.js","reducers/playlistReducer.js","reducers/index.js","index.js"],"names":["ShowPlaylists","className","to","type","data-toggle","data-target","EndScreen","props","console","log","this","playlistID","playlistLink","id","class","src","allowtransparency","allow","title","React","Component","connect","state","ownProps","match","params","PlaylistForm","cities","genres","renderCitySelector","input","meta","touched","error","value","map","val","renderGenreSelector","onSubmit","formValues","handleSubmit","Field","name","component","reduxForm","form","axios","create","baseURL","createBrowserHistory","Filters","token","Cookies","get","user_id","userID","makePlaylist","role","data-dismiss","playlist","auth","dispatch","a","django","spotify_token","playlist_name","location","city","explicit","genre","response","payload","data","history","push","Header","getID","remove","window","reload","href","style","float","Provider","user","padding","storeLogin","display_name","onClick","logOut","redirectUri","clientID","scopes","App","path","exact","INITIAL_STATE","combineReducers","action","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.f090a87e.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom'\nimport './../pinplay.css'\n\nconst ShowPlaylists = () => {\n  return(\n    <div className={\"container\"}>\n            <div className={\"jumbotron\"}>\n                <h4>\n                    Playlists will be displayed here in the future.</h4>\n                <h4>\n                    For now, click the button to go to the playlist generation page.\n                </h4>\n                <div className={\"ClickHere\"}>\n                    <Link to={`/filters`} className=\"ui button primary\">\n                        <button type=\"button\" className={\"ClickHere\"} data-toggle={\"modal\"} data-target={\"#myModal\"}>\n                            Click here!\n                        </button>\n                    </Link></div>\n            </div>\n        </div>\n  )\n}\n\nexport default ShowPlaylists\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from 'react-router-dom'\nimport './../pinplay.css'\nclass EndScreen extends React.Component{\n\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    console.log(this.props.playlistID)\n    const playlistLink = `https://open.spotify.com/embed/playlist/${this.props.playlistID}`\n    return(\n     <div className={\"container\"} id={\"Playlist\"}>\n                <div class=\"playlist_embed\">\n                    <div className={\"row\"} id={\"TitleBar\"}>\n                        <h4 id={\"TitleText\"}>\n                            Your generated playlist:\n                        </h4>\n                    </div>\n                    <div className={\"row\"}>\n                    <div className={\"col-*-*\"}>\n                        <iframe class=\"embedded-playlist\" src={playlistLink}\n                                allowtransparency=\"true\" allow=\"encrypted-media\" title={this.props.playlistID}>\n                        </iframe>\n                    </div>\n                    <div className={\"row\"} id={\"NewPlaylist\"}>\n                        <Link to={`/filters`} className=\"ui button primary\">\n                            <button type=\"button\">\n                                Create New Playlist\n                            </button>\n                        </Link>\n                    </div>\n                    </div>\n                </div>\n            </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return{playlistID:ownProps.match.params.id};\n};\n\nexport default connect(mapStateToProps, null)(EndScreen);\n\n/*\n<div class=\"site_button\">\n        <button type=\"button\">\n            <Link to={`/`} className=\"ui button primary\">\n              Update Playlist\n            </Link>\n        </button>\n*/\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport './../pinplay.css'\n\nclass PlaylistForm extends React.Component{\n  cities = ['NYC', 'LA', 'PHX']\n  genres = ['none', 'country', 'dance', 'edm', 'hip hop', 'indie-pop', 'latin', 'party', 'pop', 'rap', 'rock-n-roll', 'r&b']\n\n  renderCitySelector = ({ input, meta: { touched, error } }) => (\n    <div>\n      <select {...input}>\n        <option value=\"\">Select an area.</option>\n        {this.cities.map(val => (\n          <option value={val} key={val}>\n            {val}\n          </option>\n        ))}\n      </select>\n      {touched && error && <span>{error}</span>}\n    </div>\n  )\n\n  renderGenreSelector = ({ input, meta: { touched, error } }) => (\n    <div>\n      <select {...input}>\n        <option value=\"\">Choose a preferred genre.</option>\n        {this.genres.map(val => (\n          <option value={val} key={val}>\n            {val}\n          </option>\n        ))}\n      </select>\n      {touched && error && <span>{error}</span>}\n    </div>\n  )\n\n  onSubmit = (formValues) => {\n    this.props.onSubmit(formValues);\n  }\n  render() {\n    return(\n      <div className={\"container\"} id={\"Form\"}>\n                <form onSubmit={this.props.handleSubmit(this.onSubmit)} className={\"form-horizontal\"}>\n                    <div className={\"form-group\"}>\n                        <label>Choose a City:</label>\n                        <Field name=\"city\" component={this.renderCitySelector}/>\n                    </div>\n                    <div className={\"form-group\"}>\n                        <label>Allow explicit content?</label>\n                        <p>\n                            <Field name=\"explicit\" component=\"input\" type=\"radio\" value=\"True\"/>{' '}\n                            Yes\n                        </p>\n                        <p>\n                        <Field name=\"explicit\" component=\"input\" type=\"radio\" value=\"False\"/>{' '}\n                        No\n                        </p>\n                    </div>\n                    <div className={\"form-group\"}>\n                        <label>Choose a Genre:</label>\n                        <Field name=\"genre\" component={this.renderGenreSelector}/>\n                    </div>\n                    <div>\n                      Note: Loading may take some time when you click.\n                    </div>\n                    <button type=\"submit\" className={\"submit\"}>\n                        Submit\n                    </button>\n                </form>\n            </div>\n    )\n  }\n}\n\nexport default reduxForm({form:'filters'})(PlaylistForm);\n/*\n\n*/\n","import axios from 'axios';\n\n//TODO: Change the url for deployment\nexport default axios.create({\n    baseURL: 'https://radiant-anchorage-77650.herokuapp.com/'\n});\n","import { createBrowserHistory } from 'history'; \nexport default createBrowserHistory();","import React from 'react';\nimport {connect} from 'react-redux';\nimport Cookies from 'js-cookie'\n\nimport 'react-spotify-auth/dist/index.css'\nimport {Field, reduxForm} from 'redux-form';\nimport PlaylistForm from './PlaylistForm';\nimport {makePlaylist} from '../actions';\nimport './../pinplay.css'\n\nclass Filters extends React.Component{\n\n  onSubmit = (formValues) => {\n    const token = Cookies.get('spotifyAuthToken');\n    const user_id = this.props.userID\n    this.props.makePlaylist(token, user_id, formValues)\n  }\n\n  getPlaylistLink() {\n    return `https://open.spotify.com/embed/playlist/${this.props.playlistID}`\n  }\n  \n  render(){\n    const token = Cookies.get('spotifyAuthToken');\n    return(\n      <div>\n      {this.props.userID ? (\n        <div>\n          <PlaylistForm onSubmit={this.onSubmit}/>\n        </div>\n      ) : (\n      <div className={\"modal fade\"} role={\"dialog\"} id={\"myModal\"}>\n                        <div className={\"modal-dialog\"}>\n                            <div className={\"modal-content\"}>\n                                <div className={\"modal-header\"}>\n                                    <h5>Error</h5>\n                                    <button type={\"button\"} className={\"close\"} data-dismiss={\"modal\"}>&times;</button>\n\n                                </div>\n                                <div className={\"modal-body\"}>\n                                    <p>\n                                        Please log in to continue.</p>\n                                    <p>\n                                        NOTE: You may need to reload the page when you log in.\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n      )}\n      \n    </div>\n    )\n    \n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return{playlistID:state.playlist.playlistID, userID:state.auth.userID};\n};\n\nexport default connect(mapStateToProps, {makePlaylist})(Filters);\n\n/*const token = Cookies.get('spotifyAuthToken');\n  return(\n    \n    )\n*/\n/*\n\n*/\n","import django from '../apis/django';\nimport history from '../history';\n\nexport const makePlaylist = (token, id, formValues) => async dispatch => {\n  const response = await django.get('/pinplay_api/', {params:{\n    user_id: id,\n    spotify_token: token,\n    playlist_name: \"My Second Pinplay Playlist\",\n    location: formValues.city,\n    explicit: formValues.explicit,\n    genre: formValues.genre\n  }});\n\n  dispatch({type:'MAKE_PLAYLIST', payload:response.data});\n  history.push(`/endscreen/${response.data}`)\n};\n\nexport const getID = (id) => {\n  return ({\n    type: 'GET_ID',\n    payload:id\n  });\n};","import React from 'react';\nimport {connect} from 'react-redux';\nimport { SpotifyApiContext, User} from 'react-spotify-api'\nimport Cookies from 'js-cookie'\nimport {getID} from '../actions'\nimport './../pinplay.css'\n\nimport { SpotifyAuth } from 'react-spotify-auth'\nimport 'react-spotify-auth/dist/index.css'\n\nclass Header extends React.Component {\n\n  storeLogin(id){\n    this.props.getID(id)\n  }\n\n  logOut() {\n    Cookies.remove('spotifyAuthToken')\n    window.location.reload()\n  }\n\n  render() {\n  const token = Cookies.get('spotifyAuthToken')\n  return (\n    <div>\n      <div className=\"background_header\">\n       <h1>\n         <a href=\"/index.html\">PinPlay</a>\n       </h1>\n      <div style={{float:'right'}}>\n      {token ? (\n        <SpotifyApiContext.Provider value={token}>\n          <User>\n            {(user) =>\n                  user && user.data ? (\n                    <div className={\"row\"}>\n                      <div className={\"col-*-*\"} style={{padding: '10px'}}>\n                           <h6>\n                              {this.storeLogin(user.data.id)}\n                              Logged in as {user.data.display_name}\n                            </h6>\n                      </div>\n                      <div className={\"col-*-*\"}>\n                        <button type=\"button\" onClick={this.logOut}>\n                                                        Log Out\n                                                    </button>\n                                                </div>\n\n                                            </div>\n                                        ) : (\n                                            <p>Loading...</p>\n                                        )\n                                    }\n                                </User>\n\n        </SpotifyApiContext.Provider>\n      ) : (\n        // TODO: Replace 'localhost:3000' with 'pinplay.me'\n        <SpotifyAuth\n          redirectUri='http://pinplay.me/'\n          clientID='b698366808af491eb20ed64dedd91914'\n          scopes={['user-read-private', 'user-read-email', 'playlist-modify-public', 'playlist-modify-private']}\n        />\n      )}\n    </div>\n    </div>\n    <div className=\"header_color\"></div>\n    <div className=\"header_color2\"></div>\n    </div>\n  )\n      }\n}\n\nexport default connect(null,{getID})(Header);\n","import React from 'react'\nimport {Router, Route} from 'react-router-dom';\nimport ShowPlaylists from './ShowPlaylists';\nimport EndScreen from './EndScreen';\nimport Filters from './Filters';\nimport history from '../history';\nimport Cookies from 'js-cookie'\nimport {makePlaylist} from '../actions'\n\nimport Header from './Header';\n\n//TODO: convert App into header\n//TODO: make header always showing via react-router\nclass App extends React.Component{\n\n  render() {\n    return (\n      <div>\n        <Router history={history}>\n          <Header/>\n        \n            <div>\n              <Route path=\"/\" exact component={ShowPlaylists} />\n              \n              <Route path=\"/filters\" exact component={Filters}/>\n              <Route path=\"/endscreen/:id\" exact component={EndScreen}/>\n            </div>\n        </Router>\n        \n      </div>\n    )\n  }\n    \n    \n    /*\n    <p>You are authorized with token: {token}</p>\n    <div>\n    Email is {user.data.email}\n    </div>\n    <div>\n    URI is {user.data.uri}\n    </div>\n    <div>\n    URL is {user.data.external_urls.spotify}\n    </div>\n    <img src={user.data.images[0].url}></img>\n    \n    <Route path=\"/endscreen/:id\" exact component={EndScreen} />\n    */\n};\n\nexport default App;","const INITIAL_STATE = {\n  userID: null\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch(action.type) {\n      case 'GET_ID':\n        return {...state, userID: action.payload};\n      default:\n          return state;\n  }\n}","const INITIAL_STATE = {\n  playlistID: null\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch(action.type) {\n      case 'MAKE_PLAYLIST':\n        return {...state, playlistID: action.payload};\n      default:\n          return state;\n  }\n}","import {combineReducers} from 'redux';\nimport authReducer from './authReducer';\nimport {reducer as formReducer} from 'redux-form';\nimport playlistReducer from './playlistReducer';\n\nexport default combineReducers({\n  playlist: playlistReducer,\n  auth: authReducer,\n  form: formReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\n\nimport App from './components/App.js';\nimport reducers from './reducers';\nimport reduxThunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducers, \n    composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>, \n  document.querySelector('#root')\n);"],"sourceRoot":""}